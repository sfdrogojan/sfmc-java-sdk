/*
 * Marketing Cloud REST API
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.salesforce.marketingcloud.javasdk.api;

import com.github.salesforce.marketingcloud.javasdk.ApiCallback;
import com.github.salesforce.marketingcloud.javasdk.ApiClient;
import com.github.salesforce.marketingcloud.javasdk.ApiException;
import com.github.salesforce.marketingcloud.javasdk.ApiResponse;
import com.github.salesforce.marketingcloud.javasdk.Configuration;
import com.github.salesforce.marketingcloud.javasdk.Pair;
import com.github.salesforce.marketingcloud.javasdk.ProgressRequestBody;
import com.github.salesforce.marketingcloud.javasdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.salesforce.marketingcloud.javasdk.model.ApiError;
import java.math.BigDecimal;
import com.github.salesforce.marketingcloud.javasdk.model.EmailDefinition;
import com.github.salesforce.marketingcloud.javasdk.model.EmailDefinitionDescription;
import com.github.salesforce.marketingcloud.javasdk.model.EmailDefinitionsResponse;
import com.github.salesforce.marketingcloud.javasdk.model.SuccessfulEmailDefinitionDelete;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmailDefinitionApi {
    private ApiClient apiClient;

    public EmailDefinitionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmailDefinitionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createEmailDefinition
     * @param body JSON Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEmailDefinitionCall(EmailDefinition body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/definitions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEmailDefinitionValidateBeforeCall(EmailDefinition body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createEmailDefinitionCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * createEmailDefinition
     * Creates the definition for an email.
     * @param body JSON Parameters (optional)
     * @return EmailDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailDefinition createEmailDefinition(EmailDefinition body) throws ApiException {
        ApiResponse<EmailDefinition> resp = createEmailDefinitionWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * createEmailDefinition
     * Creates the definition for an email.
     * @param body JSON Parameters (optional)
     * @return ApiResponse&lt;EmailDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailDefinition> createEmailDefinitionWithHttpInfo(EmailDefinition body) throws ApiException {
        com.squareup.okhttp.Call call = createEmailDefinitionValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<EmailDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createEmailDefinition (asynchronously)
     * Creates the definition for an email.
     * @param body JSON Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEmailDefinitionAsync(EmailDefinition body, final ApiCallback<EmailDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEmailDefinitionValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmailDefinitionByDefinitionKey
     * @param definitionKey Unique identifier of the definition to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailDefinitionByDefinitionKeyCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/definitions/{definitionKey}"
            .replaceAll("\\{" + "definitionKey" + "\\}", apiClient.escapeString(definitionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailDefinitionByDefinitionKeyValidateBeforeCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'definitionKey' is set
        if (definitionKey == null) {
            throw new ApiException("Missing the required parameter 'definitionKey' when calling deleteEmailDefinitionByDefinitionKey(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEmailDefinitionByDefinitionKeyCall(definitionKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * deleteEmailDefinition
     * Deletes the definition for an email.
     * @param definitionKey Unique identifier of the definition to delete (required)
     * @return SuccessfulEmailDefinitionDelete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessfulEmailDefinitionDelete deleteEmailDefinitionByDefinitionKey(String definitionKey) throws ApiException {
        ApiResponse<SuccessfulEmailDefinitionDelete> resp = deleteEmailDefinitionByDefinitionKeyWithHttpInfo(definitionKey);
        return resp.getData();
    }

    /**
     * deleteEmailDefinition
     * Deletes the definition for an email.
     * @param definitionKey Unique identifier of the definition to delete (required)
     * @return ApiResponse&lt;SuccessfulEmailDefinitionDelete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessfulEmailDefinitionDelete> deleteEmailDefinitionByDefinitionKeyWithHttpInfo(String definitionKey) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailDefinitionByDefinitionKeyValidateBeforeCall(definitionKey, null, null);
        Type localVarReturnType = new TypeToken<SuccessfulEmailDefinitionDelete>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteEmailDefinition (asynchronously)
     * Deletes the definition for an email.
     * @param definitionKey Unique identifier of the definition to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailDefinitionByDefinitionKeyAsync(String definitionKey, final ApiCallback<SuccessfulEmailDefinitionDelete> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailDefinitionByDefinitionKeyValidateBeforeCall(definitionKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessfulEmailDefinitionDelete>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailDefinitionByDefinitionKey
     * @param definitionKey Unique identifier of the definition to get (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailDefinitionByDefinitionKeyCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/definitions/{definitionKey}"
            .replaceAll("\\{" + "definitionKey" + "\\}", apiClient.escapeString(definitionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailDefinitionByDefinitionKeyValidateBeforeCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'definitionKey' is set
        if (definitionKey == null) {
            throw new ApiException("Missing the required parameter 'definitionKey' when calling getEmailDefinitionByDefinitionKey(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailDefinitionByDefinitionKeyCall(definitionKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getEmailDefinition
     * Gets send definition configuration details for a definition key.
     * @param definitionKey Unique identifier of the definition to get (required)
     * @return EmailDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailDefinition getEmailDefinitionByDefinitionKey(String definitionKey) throws ApiException {
        ApiResponse<EmailDefinition> resp = getEmailDefinitionByDefinitionKeyWithHttpInfo(definitionKey);
        return resp.getData();
    }

    /**
     * getEmailDefinition
     * Gets send definition configuration details for a definition key.
     * @param definitionKey Unique identifier of the definition to get (required)
     * @return ApiResponse&lt;EmailDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailDefinition> getEmailDefinitionByDefinitionKeyWithHttpInfo(String definitionKey) throws ApiException {
        com.squareup.okhttp.Call call = getEmailDefinitionByDefinitionKeyValidateBeforeCall(definitionKey, null, null);
        Type localVarReturnType = new TypeToken<EmailDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getEmailDefinition (asynchronously)
     * Gets send definition configuration details for a definition key.
     * @param definitionKey Unique identifier of the definition to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailDefinitionByDefinitionKeyAsync(String definitionKey, final ApiCallback<EmailDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailDefinitionByDefinitionKeyValidateBeforeCall(definitionKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailDefinitions
     * @param filter Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param page Page number to return. (optional)
     * @param orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailDefinitionsCall(String filter, BigDecimal pageSize, BigDecimal page, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/definitions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$filter", filter));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$pageSize", pageSize));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$page", page));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$orderBy", orderBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailDefinitionsValidateBeforeCall(String filter, BigDecimal pageSize, BigDecimal page, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getEmailDefinitionsCall(filter, pageSize, page, orderBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getEmailDefinitions
     * Gets a list of send definitions.
     * @param filter Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param page Page number to return. (optional)
     * @param orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     * @return EmailDefinitionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailDefinitionsResponse getEmailDefinitions(String filter, BigDecimal pageSize, BigDecimal page, String orderBy) throws ApiException {
        ApiResponse<EmailDefinitionsResponse> resp = getEmailDefinitionsWithHttpInfo(filter, pageSize, page, orderBy);
        return resp.getData();
    }

    /**
     * getEmailDefinitions
     * Gets a list of send definitions.
     * @param filter Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param page Page number to return. (optional)
     * @param orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     * @return ApiResponse&lt;EmailDefinitionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailDefinitionsResponse> getEmailDefinitionsWithHttpInfo(String filter, BigDecimal pageSize, BigDecimal page, String orderBy) throws ApiException {
        com.squareup.okhttp.Call call = getEmailDefinitionsValidateBeforeCall(filter, pageSize, page, orderBy, null, null);
        Type localVarReturnType = new TypeToken<EmailDefinitionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getEmailDefinitions (asynchronously)
     * Gets a list of send definitions.
     * @param filter Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param page Page number to return. (optional)
     * @param orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailDefinitionsAsync(String filter, BigDecimal pageSize, BigDecimal page, String orderBy, final ApiCallback<EmailDefinitionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailDefinitionsValidateBeforeCall(filter, pageSize, page, orderBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailDefinitionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for partiallyUpdateEmailDefinition
     * @param definitionKey Unique identifier of the definition to update (required)
     * @param body JSON Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call partiallyUpdateEmailDefinitionCall(String definitionKey, EmailDefinitionDescription body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/definitions/{definitionKey}"
            .replaceAll("\\{" + "definitionKey" + "\\}", apiClient.escapeString(definitionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partiallyUpdateEmailDefinitionValidateBeforeCall(String definitionKey, EmailDefinitionDescription body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'definitionKey' is set
        if (definitionKey == null) {
            throw new ApiException("Missing the required parameter 'definitionKey' when calling partiallyUpdateEmailDefinition(Async)");
        }
        

        com.squareup.okhttp.Call call = partiallyUpdateEmailDefinitionCall(definitionKey, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * patchEmailDefinition
     * Updates a specific email definition.
     * @param definitionKey Unique identifier of the definition to update (required)
     * @param body JSON Parameters (optional)
     * @return EmailDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailDefinition partiallyUpdateEmailDefinition(String definitionKey, EmailDefinitionDescription body) throws ApiException {
        ApiResponse<EmailDefinition> resp = partiallyUpdateEmailDefinitionWithHttpInfo(definitionKey, body);
        return resp.getData();
    }

    /**
     * patchEmailDefinition
     * Updates a specific email definition.
     * @param definitionKey Unique identifier of the definition to update (required)
     * @param body JSON Parameters (optional)
     * @return ApiResponse&lt;EmailDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailDefinition> partiallyUpdateEmailDefinitionWithHttpInfo(String definitionKey, EmailDefinitionDescription body) throws ApiException {
        com.squareup.okhttp.Call call = partiallyUpdateEmailDefinitionValidateBeforeCall(definitionKey, body, null, null);
        Type localVarReturnType = new TypeToken<EmailDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * patchEmailDefinition (asynchronously)
     * Updates a specific email definition.
     * @param definitionKey Unique identifier of the definition to update (required)
     * @param body JSON Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partiallyUpdateEmailDefinitionAsync(String definitionKey, EmailDefinitionDescription body, final ApiCallback<EmailDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partiallyUpdateEmailDefinitionValidateBeforeCall(definitionKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
