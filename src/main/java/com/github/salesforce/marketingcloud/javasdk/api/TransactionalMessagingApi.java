/*
 * Marketing Cloud REST API
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.salesforce.marketingcloud.javasdk.api;

import com.github.salesforce.marketingcloud.javasdk.*;
import com.github.salesforce.marketingcloud.javasdk.auth.*;
import com.github.salesforce.marketingcloud.javasdk.BeanValidationException;

import com.github.salesforce.marketingcloud.javasdk.validation.ModelValidator;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import javax.validation.constraints.*;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.ValidatorFactory;
import javax.validation.executable.ExecutableValidator;
import java.util.Set;
import java.lang.reflect.Method;
import java.lang.reflect.Type;

import java.math.BigDecimal;
import com.github.salesforce.marketingcloud.javasdk.model.CreateEmailDefinitionRequest;
import com.github.salesforce.marketingcloud.javasdk.model.CreateSmsDefinitionRequest;
import com.github.salesforce.marketingcloud.javasdk.model.DeleteQueuedMessagesForSendDefinitionResponse;
import com.github.salesforce.marketingcloud.javasdk.model.DeleteSendDefinitionResponse;
import com.github.salesforce.marketingcloud.javasdk.model.GetDefinitionSendStatusForRecipientResponse;
import com.github.salesforce.marketingcloud.javasdk.model.GetDefinitionsNotSentToRecipientsResponse;
import com.github.salesforce.marketingcloud.javasdk.model.GetEmailDefinitionsResponse;
import com.github.salesforce.marketingcloud.javasdk.model.GetQueueMetricsForSendDefinitionResponse;
import com.github.salesforce.marketingcloud.javasdk.model.GetSmsDefinitionsResponse;
import com.github.salesforce.marketingcloud.javasdk.model.SendDefinitionToMultipleRecipientsResponse;
import com.github.salesforce.marketingcloud.javasdk.model.SendDefinitionToSingleRecipientResponse;
import com.github.salesforce.marketingcloud.javasdk.model.SendEmailToMultipleRecipientsRequest;
import com.github.salesforce.marketingcloud.javasdk.model.SendEmailToSingleRecipientRequest;
import com.github.salesforce.marketingcloud.javasdk.model.SendSmsToMultipleRecipientsRequest;
import com.github.salesforce.marketingcloud.javasdk.model.SendSmsToSingleRecipientRequest;
import com.github.salesforce.marketingcloud.javasdk.model.UpdateEmailDefinitionRequest;
import com.github.salesforce.marketingcloud.javasdk.model.UpdateSmsDefinitionRequest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionalMessagingApi {
    private ApiClient apiClient;
    private AuthService authService;

    public TransactionalMessagingApi(String authBasePath, String clientId, String clientSecret, String accountId, String scope) {
        ClientConfig clientConfig = new ClientConfig(authBasePath, clientId, clientSecret, accountId, scope);
        DateTimeProvider dateTimeProvider = new DateTimeProvider();
        CacheService cacheService = new CacheService(dateTimeProvider);
        RuntimeInformationProvider runtimeInformationProvider = new RuntimeInformationProvider();
        ApiClient apiClient = new ApiClient(runtimeInformationProvider, new ModelValidator());

        this.authService = new AuthService(clientConfig, apiClient, cacheService);
        this.apiClient = new OAuth2ApiClient(runtimeInformationProvider, authService);
    }

    /**
     * Build call for createEmailDefinition
     * @param body JSON Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEmailDefinitionCall(CreateEmailDefinitionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/definitions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEmailDefinitionValidateBeforeCall(CreateEmailDefinitionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { body };
            Method method = this.getClass().getMethod("createEmailDefinitionWithHttpInfo", CreateEmailDefinitionRequest.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = createEmailDefinitionCall(body, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * createEmailDefinition
     * Creates the definition for an email.
     * @param body JSON Parameters (optional)
     * @return CreateEmailDefinitionRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateEmailDefinitionRequest createEmailDefinition(CreateEmailDefinitionRequest body) throws ApiException {
        ApiResponse<CreateEmailDefinitionRequest> resp = createEmailDefinitionWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * createEmailDefinition
     * Creates the definition for an email.
     * @param body JSON Parameters (optional)
     * @return ApiResponse&lt;CreateEmailDefinitionRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateEmailDefinitionRequest> createEmailDefinitionWithHttpInfo( CreateEmailDefinitionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createEmailDefinitionValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CreateEmailDefinitionRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createEmailDefinition (asynchronously)
     * Creates the definition for an email.
     * @param body JSON Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEmailDefinitionAsync(CreateEmailDefinitionRequest body, final ApiCallback<CreateEmailDefinitionRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEmailDefinitionValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateEmailDefinitionRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSmsDefinition
     * @param body JSON Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSmsDefinitionCall(CreateSmsDefinitionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/messaging/v1/sms/definitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSmsDefinitionValidateBeforeCall(CreateSmsDefinitionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { body };
            Method method = this.getClass().getMethod("createSmsDefinitionWithHttpInfo", CreateSmsDefinitionRequest.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = createSmsDefinitionCall(body, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * createSmsDefinition
     * Creates the definition for an SMS.
     * @param body JSON Parameters (optional)
     * @return CreateSmsDefinitionRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateSmsDefinitionRequest createSmsDefinition(CreateSmsDefinitionRequest body) throws ApiException {
        ApiResponse<CreateSmsDefinitionRequest> resp = createSmsDefinitionWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * createSmsDefinition
     * Creates the definition for an SMS.
     * @param body JSON Parameters (optional)
     * @return ApiResponse&lt;CreateSmsDefinitionRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateSmsDefinitionRequest> createSmsDefinitionWithHttpInfo( CreateSmsDefinitionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createSmsDefinitionValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CreateSmsDefinitionRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createSmsDefinition (asynchronously)
     * Creates the definition for an SMS.
     * @param body JSON Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSmsDefinitionAsync(CreateSmsDefinitionRequest body, final ApiCallback<CreateSmsDefinitionRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSmsDefinitionValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSmsDefinitionRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmailDefinition
     * @param definitionKey Unique identifier of the definition to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailDefinitionCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/definitions/{definitionKey}"
            .replaceAll("\\{" + "definitionKey" + "\\}", apiClient.escapeString(definitionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailDefinitionValidateBeforeCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { definitionKey };
            Method method = this.getClass().getMethod("deleteEmailDefinitionWithHttpInfo", String.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = deleteEmailDefinitionCall(definitionKey, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * deleteEmailDefinition
     * Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
     * @param definitionKey Unique identifier of the definition to delete (required)
     * @return DeleteSendDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteSendDefinitionResponse deleteEmailDefinition(String definitionKey) throws ApiException {
        ApiResponse<DeleteSendDefinitionResponse> resp = deleteEmailDefinitionWithHttpInfo(definitionKey);
        return resp.getData();
    }

    /**
     * deleteEmailDefinition
     * Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
     * @param definitionKey Unique identifier of the definition to delete (required)
     * @return ApiResponse&lt;DeleteSendDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteSendDefinitionResponse> deleteEmailDefinitionWithHttpInfo( @NotNull String definitionKey) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailDefinitionValidateBeforeCall(definitionKey, null, null);
        Type localVarReturnType = new TypeToken<DeleteSendDefinitionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteEmailDefinition (asynchronously)
     * Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
     * @param definitionKey Unique identifier of the definition to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailDefinitionAsync(String definitionKey, final ApiCallback<DeleteSendDefinitionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailDefinitionValidateBeforeCall(definitionKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteSendDefinitionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteQueuedMessagesForEmailDefinition
     * @param definitionKey Unique identifier of the email definition (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQueuedMessagesForEmailDefinitionCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/definitions/{definitionKey}/queue"
            .replaceAll("\\{" + "definitionKey" + "\\}", apiClient.escapeString(definitionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQueuedMessagesForEmailDefinitionValidateBeforeCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { definitionKey };
            Method method = this.getClass().getMethod("deleteQueuedMessagesForEmailDefinitionWithHttpInfo", String.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = deleteQueuedMessagesForEmailDefinitionCall(definitionKey, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * deleteQueuedMessagesForEmailDefinition
     * Deletes the queue for an email definition. The email definition must be in inactive status.
     * @param definitionKey Unique identifier of the email definition (required)
     * @return DeleteQueuedMessagesForSendDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteQueuedMessagesForSendDefinitionResponse deleteQueuedMessagesForEmailDefinition(String definitionKey) throws ApiException {
        ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse> resp = deleteQueuedMessagesForEmailDefinitionWithHttpInfo(definitionKey);
        return resp.getData();
    }

    /**
     * deleteQueuedMessagesForEmailDefinition
     * Deletes the queue for an email definition. The email definition must be in inactive status.
     * @param definitionKey Unique identifier of the email definition (required)
     * @return ApiResponse&lt;DeleteQueuedMessagesForSendDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse> deleteQueuedMessagesForEmailDefinitionWithHttpInfo( @NotNull String definitionKey) throws ApiException {
        com.squareup.okhttp.Call call = deleteQueuedMessagesForEmailDefinitionValidateBeforeCall(definitionKey, null, null);
        Type localVarReturnType = new TypeToken<DeleteQueuedMessagesForSendDefinitionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteQueuedMessagesForEmailDefinition (asynchronously)
     * Deletes the queue for an email definition. The email definition must be in inactive status.
     * @param definitionKey Unique identifier of the email definition (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQueuedMessagesForEmailDefinitionAsync(String definitionKey, final ApiCallback<DeleteQueuedMessagesForSendDefinitionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQueuedMessagesForEmailDefinitionValidateBeforeCall(definitionKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteQueuedMessagesForSendDefinitionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteQueuedMessagesForSmsDefinition
     * @param definitionKey Unique identifier of the SMS definition (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQueuedMessagesForSmsDefinitionCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/sms/definitions/{definitionKey}/queue"
            .replaceAll("\\{" + "definitionKey" + "\\}", apiClient.escapeString(definitionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQueuedMessagesForSmsDefinitionValidateBeforeCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { definitionKey };
            Method method = this.getClass().getMethod("deleteQueuedMessagesForSmsDefinitionWithHttpInfo", String.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = deleteQueuedMessagesForSmsDefinitionCall(definitionKey, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * deleteQueuedMessagesForSmsDefinition
     * Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
     * @param definitionKey Unique identifier of the SMS definition (required)
     * @return DeleteQueuedMessagesForSendDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteQueuedMessagesForSendDefinitionResponse deleteQueuedMessagesForSmsDefinition(String definitionKey) throws ApiException {
        ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse> resp = deleteQueuedMessagesForSmsDefinitionWithHttpInfo(definitionKey);
        return resp.getData();
    }

    /**
     * deleteQueuedMessagesForSmsDefinition
     * Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
     * @param definitionKey Unique identifier of the SMS definition (required)
     * @return ApiResponse&lt;DeleteQueuedMessagesForSendDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteQueuedMessagesForSendDefinitionResponse> deleteQueuedMessagesForSmsDefinitionWithHttpInfo( @NotNull String definitionKey) throws ApiException {
        com.squareup.okhttp.Call call = deleteQueuedMessagesForSmsDefinitionValidateBeforeCall(definitionKey, null, null);
        Type localVarReturnType = new TypeToken<DeleteQueuedMessagesForSendDefinitionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteQueuedMessagesForSmsDefinition (asynchronously)
     * Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
     * @param definitionKey Unique identifier of the SMS definition (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQueuedMessagesForSmsDefinitionAsync(String definitionKey, final ApiCallback<DeleteQueuedMessagesForSendDefinitionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQueuedMessagesForSmsDefinitionValidateBeforeCall(definitionKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteQueuedMessagesForSendDefinitionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSmsDefinition
     * @param definitionKey Unique identifier of the definition to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSmsDefinitionCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/sms/definitions/{definitionKey}"
            .replaceAll("\\{" + "definitionKey" + "\\}", apiClient.escapeString(definitionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSmsDefinitionValidateBeforeCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { definitionKey };
            Method method = this.getClass().getMethod("deleteSmsDefinitionWithHttpInfo", String.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = deleteSmsDefinitionCall(definitionKey, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * deleteSmsDefinition
     * Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
     * @param definitionKey Unique identifier of the definition to delete (required)
     * @return DeleteSendDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteSendDefinitionResponse deleteSmsDefinition(String definitionKey) throws ApiException {
        ApiResponse<DeleteSendDefinitionResponse> resp = deleteSmsDefinitionWithHttpInfo(definitionKey);
        return resp.getData();
    }

    /**
     * deleteSmsDefinition
     * Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
     * @param definitionKey Unique identifier of the definition to delete (required)
     * @return ApiResponse&lt;DeleteSendDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteSendDefinitionResponse> deleteSmsDefinitionWithHttpInfo( @NotNull String definitionKey) throws ApiException {
        com.squareup.okhttp.Call call = deleteSmsDefinitionValidateBeforeCall(definitionKey, null, null);
        Type localVarReturnType = new TypeToken<DeleteSendDefinitionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteSmsDefinition (asynchronously)
     * Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
     * @param definitionKey Unique identifier of the definition to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSmsDefinitionAsync(String definitionKey, final ApiCallback<DeleteSendDefinitionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSmsDefinitionValidateBeforeCall(definitionKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteSendDefinitionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailDefinition
     * @param definitionKey Unique identifier of the definition to get (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailDefinitionCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/definitions/{definitionKey}"
            .replaceAll("\\{" + "definitionKey" + "\\}", apiClient.escapeString(definitionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailDefinitionValidateBeforeCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { definitionKey };
            Method method = this.getClass().getMethod("getEmailDefinitionWithHttpInfo", String.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = getEmailDefinitionCall(definitionKey, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * getEmailDefinition
     * Gets email definition configuration details for a definition key.
     * @param definitionKey Unique identifier of the definition to get (required)
     * @return CreateEmailDefinitionRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateEmailDefinitionRequest getEmailDefinition(String definitionKey) throws ApiException {
        ApiResponse<CreateEmailDefinitionRequest> resp = getEmailDefinitionWithHttpInfo(definitionKey);
        return resp.getData();
    }

    /**
     * getEmailDefinition
     * Gets email definition configuration details for a definition key.
     * @param definitionKey Unique identifier of the definition to get (required)
     * @return ApiResponse&lt;CreateEmailDefinitionRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateEmailDefinitionRequest> getEmailDefinitionWithHttpInfo( @NotNull String definitionKey) throws ApiException {
        com.squareup.okhttp.Call call = getEmailDefinitionValidateBeforeCall(definitionKey, null, null);
        Type localVarReturnType = new TypeToken<CreateEmailDefinitionRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getEmailDefinition (asynchronously)
     * Gets email definition configuration details for a definition key.
     * @param definitionKey Unique identifier of the definition to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailDefinitionAsync(String definitionKey, final ApiCallback<CreateEmailDefinitionRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailDefinitionValidateBeforeCall(definitionKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateEmailDefinitionRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailDefinitions
     * @param status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param page Page number to return. (optional)
     * @param orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailDefinitionsCall(String status, BigDecimal pageSize, BigDecimal page, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/definitions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailDefinitionsValidateBeforeCall(String status, BigDecimal pageSize, BigDecimal page, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { status, pageSize, page, orderBy };
            Method method = this.getClass().getMethod("getEmailDefinitionsWithHttpInfo", String.class, BigDecimal.class, BigDecimal.class, String.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = getEmailDefinitionsCall(status, pageSize, page, orderBy, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * getEmailDefinitions
     * Gets a list of email definitions.
     * @param status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param page Page number to return. (optional)
     * @param orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     * @return GetEmailDefinitionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetEmailDefinitionsResponse getEmailDefinitions(String status, BigDecimal pageSize, BigDecimal page, String orderBy) throws ApiException {
        ApiResponse<GetEmailDefinitionsResponse> resp = getEmailDefinitionsWithHttpInfo(status, pageSize, page, orderBy);
        return resp.getData();
    }

    /**
     * getEmailDefinitions
     * Gets a list of email definitions.
     * @param status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param page Page number to return. (optional)
     * @param orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     * @return ApiResponse&lt;GetEmailDefinitionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetEmailDefinitionsResponse> getEmailDefinitionsWithHttpInfo( String status,  BigDecimal pageSize,  BigDecimal page,  String orderBy) throws ApiException {
        com.squareup.okhttp.Call call = getEmailDefinitionsValidateBeforeCall(status, pageSize, page, orderBy, null, null);
        Type localVarReturnType = new TypeToken<GetEmailDefinitionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getEmailDefinitions (asynchronously)
     * Gets a list of email definitions.
     * @param status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param page Page number to return. (optional)
     * @param orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailDefinitionsAsync(String status, BigDecimal pageSize, BigDecimal page, String orderBy, final ApiCallback<GetEmailDefinitionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailDefinitionsValidateBeforeCall(status, pageSize, page, orderBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetEmailDefinitionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSendStatusForRecipient
     * @param messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSendStatusForRecipientCall(String messageKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/messages/{messageKey}"
            .replaceAll("\\{" + "messageKey" + "\\}", apiClient.escapeString(messageKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSendStatusForRecipientValidateBeforeCall(String messageKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { messageKey };
            Method method = this.getClass().getMethod("getEmailSendStatusForRecipientWithHttpInfo", String.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = getEmailSendStatusForRecipientCall(messageKey, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * getEmailSendStatusForRecipient
     * Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
     * @param messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     * @return GetDefinitionSendStatusForRecipientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDefinitionSendStatusForRecipientResponse getEmailSendStatusForRecipient(String messageKey) throws ApiException {
        ApiResponse<GetDefinitionSendStatusForRecipientResponse> resp = getEmailSendStatusForRecipientWithHttpInfo(messageKey);
        return resp.getData();
    }

    /**
     * getEmailSendStatusForRecipient
     * Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
     * @param messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     * @return ApiResponse&lt;GetDefinitionSendStatusForRecipientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDefinitionSendStatusForRecipientResponse> getEmailSendStatusForRecipientWithHttpInfo( @NotNull String messageKey) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSendStatusForRecipientValidateBeforeCall(messageKey, null, null);
        Type localVarReturnType = new TypeToken<GetDefinitionSendStatusForRecipientResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getEmailSendStatusForRecipient (asynchronously)
     * Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
     * @param messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSendStatusForRecipientAsync(String messageKey, final ApiCallback<GetDefinitionSendStatusForRecipientResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSendStatusForRecipientValidateBeforeCall(messageKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDefinitionSendStatusForRecipientResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailsNotSentToRecipients
     * @param type Only notSent is supported. (required)
     * @param pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailsNotSentToRecipientsCall(String type, Integer pageSize, Integer lastEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/messages/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$pageSize", pageSize));
        if (lastEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastEventId", lastEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailsNotSentToRecipientsValidateBeforeCall(String type, Integer pageSize, Integer lastEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { type, pageSize, lastEventId };
            Method method = this.getClass().getMethod("getEmailsNotSentToRecipientsWithHttpInfo", String.class, Integer.class, Integer.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = getEmailsNotSentToRecipientsCall(type, pageSize, lastEventId, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * getEmailsNotSentToRecipients
     * Gets a paginated list of messages that were not sent, ordered from oldest to newest.
     * @param type Only notSent is supported. (required)
     * @param pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     * @return GetDefinitionsNotSentToRecipientsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDefinitionsNotSentToRecipientsResponse getEmailsNotSentToRecipients(String type, Integer pageSize, Integer lastEventId) throws ApiException {
        ApiResponse<GetDefinitionsNotSentToRecipientsResponse> resp = getEmailsNotSentToRecipientsWithHttpInfo(type, pageSize, lastEventId);
        return resp.getData();
    }

    /**
     * getEmailsNotSentToRecipients
     * Gets a paginated list of messages that were not sent, ordered from oldest to newest.
     * @param type Only notSent is supported. (required)
     * @param pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     * @return ApiResponse&lt;GetDefinitionsNotSentToRecipientsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDefinitionsNotSentToRecipientsResponse> getEmailsNotSentToRecipientsWithHttpInfo( @NotNull String type,  Integer pageSize,  Integer lastEventId) throws ApiException {
        com.squareup.okhttp.Call call = getEmailsNotSentToRecipientsValidateBeforeCall(type, pageSize, lastEventId, null, null);
        Type localVarReturnType = new TypeToken<GetDefinitionsNotSentToRecipientsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getEmailsNotSentToRecipients (asynchronously)
     * Gets a paginated list of messages that were not sent, ordered from oldest to newest.
     * @param type Only notSent is supported. (required)
     * @param pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailsNotSentToRecipientsAsync(String type, Integer pageSize, Integer lastEventId, final ApiCallback<GetDefinitionsNotSentToRecipientsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailsNotSentToRecipientsValidateBeforeCall(type, pageSize, lastEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDefinitionsNotSentToRecipientsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQueueMetricsForEmailDefinition
     * @param definitionKey Unique identifier of the email definition (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQueueMetricsForEmailDefinitionCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/definitions/{definitionKey}/queue"
            .replaceAll("\\{" + "definitionKey" + "\\}", apiClient.escapeString(definitionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQueueMetricsForEmailDefinitionValidateBeforeCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { definitionKey };
            Method method = this.getClass().getMethod("getQueueMetricsForEmailDefinitionWithHttpInfo", String.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = getQueueMetricsForEmailDefinitionCall(definitionKey, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * getQueueMetricsForEmailDefinition
     * Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
     * @param definitionKey Unique identifier of the email definition (required)
     * @return GetQueueMetricsForSendDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetQueueMetricsForSendDefinitionResponse getQueueMetricsForEmailDefinition(String definitionKey) throws ApiException {
        ApiResponse<GetQueueMetricsForSendDefinitionResponse> resp = getQueueMetricsForEmailDefinitionWithHttpInfo(definitionKey);
        return resp.getData();
    }

    /**
     * getQueueMetricsForEmailDefinition
     * Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
     * @param definitionKey Unique identifier of the email definition (required)
     * @return ApiResponse&lt;GetQueueMetricsForSendDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetQueueMetricsForSendDefinitionResponse> getQueueMetricsForEmailDefinitionWithHttpInfo( @NotNull String definitionKey) throws ApiException {
        com.squareup.okhttp.Call call = getQueueMetricsForEmailDefinitionValidateBeforeCall(definitionKey, null, null);
        Type localVarReturnType = new TypeToken<GetQueueMetricsForSendDefinitionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getQueueMetricsForEmailDefinition (asynchronously)
     * Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
     * @param definitionKey Unique identifier of the email definition (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQueueMetricsForEmailDefinitionAsync(String definitionKey, final ApiCallback<GetQueueMetricsForSendDefinitionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQueueMetricsForEmailDefinitionValidateBeforeCall(definitionKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetQueueMetricsForSendDefinitionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQueueMetricsForSmsDefinition
     * @param definitionKey Unique identifier of the SMS definition (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQueueMetricsForSmsDefinitionCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/sms/definitions/{definitionKey}/queue"
            .replaceAll("\\{" + "definitionKey" + "\\}", apiClient.escapeString(definitionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQueueMetricsForSmsDefinitionValidateBeforeCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { definitionKey };
            Method method = this.getClass().getMethod("getQueueMetricsForSmsDefinitionWithHttpInfo", String.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = getQueueMetricsForSmsDefinitionCall(definitionKey, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * getQueueMetricsForSmsDefinition
     * Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
     * @param definitionKey Unique identifier of the SMS definition (required)
     * @return GetQueueMetricsForSendDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetQueueMetricsForSendDefinitionResponse getQueueMetricsForSmsDefinition(String definitionKey) throws ApiException {
        ApiResponse<GetQueueMetricsForSendDefinitionResponse> resp = getQueueMetricsForSmsDefinitionWithHttpInfo(definitionKey);
        return resp.getData();
    }

    /**
     * getQueueMetricsForSmsDefinition
     * Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
     * @param definitionKey Unique identifier of the SMS definition (required)
     * @return ApiResponse&lt;GetQueueMetricsForSendDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetQueueMetricsForSendDefinitionResponse> getQueueMetricsForSmsDefinitionWithHttpInfo( @NotNull String definitionKey) throws ApiException {
        com.squareup.okhttp.Call call = getQueueMetricsForSmsDefinitionValidateBeforeCall(definitionKey, null, null);
        Type localVarReturnType = new TypeToken<GetQueueMetricsForSendDefinitionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getQueueMetricsForSmsDefinition (asynchronously)
     * Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
     * @param definitionKey Unique identifier of the SMS definition (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQueueMetricsForSmsDefinitionAsync(String definitionKey, final ApiCallback<GetQueueMetricsForSendDefinitionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQueueMetricsForSmsDefinitionValidateBeforeCall(definitionKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetQueueMetricsForSendDefinitionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSMSsNotSentToRecipients
     * @param type Only notSent is supported. (required)
     * @param pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSMSsNotSentToRecipientsCall(String type, Integer pageSize, Integer lastEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/sms/messages/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$pageSize", pageSize));
        if (lastEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastEventId", lastEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSMSsNotSentToRecipientsValidateBeforeCall(String type, Integer pageSize, Integer lastEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { type, pageSize, lastEventId };
            Method method = this.getClass().getMethod("getSMSsNotSentToRecipientsWithHttpInfo", String.class, Integer.class, Integer.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = getSMSsNotSentToRecipientsCall(type, pageSize, lastEventId, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * getSMSsNotSentToRecipients
     * Gets a paginated list of messages that were not sent, ordered from oldest to newest.
     * @param type Only notSent is supported. (required)
     * @param pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     * @return GetDefinitionsNotSentToRecipientsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDefinitionsNotSentToRecipientsResponse getSMSsNotSentToRecipients(String type, Integer pageSize, Integer lastEventId) throws ApiException {
        ApiResponse<GetDefinitionsNotSentToRecipientsResponse> resp = getSMSsNotSentToRecipientsWithHttpInfo(type, pageSize, lastEventId);
        return resp.getData();
    }

    /**
     * getSMSsNotSentToRecipients
     * Gets a paginated list of messages that were not sent, ordered from oldest to newest.
     * @param type Only notSent is supported. (required)
     * @param pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     * @return ApiResponse&lt;GetDefinitionsNotSentToRecipientsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDefinitionsNotSentToRecipientsResponse> getSMSsNotSentToRecipientsWithHttpInfo( @NotNull String type,  Integer pageSize,  Integer lastEventId) throws ApiException {
        com.squareup.okhttp.Call call = getSMSsNotSentToRecipientsValidateBeforeCall(type, pageSize, lastEventId, null, null);
        Type localVarReturnType = new TypeToken<GetDefinitionsNotSentToRecipientsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getSMSsNotSentToRecipients (asynchronously)
     * Gets a paginated list of messages that were not sent, ordered from oldest to newest.
     * @param type Only notSent is supported. (required)
     * @param pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSMSsNotSentToRecipientsAsync(String type, Integer pageSize, Integer lastEventId, final ApiCallback<GetDefinitionsNotSentToRecipientsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSMSsNotSentToRecipientsValidateBeforeCall(type, pageSize, lastEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDefinitionsNotSentToRecipientsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSmsDefinition
     * @param definitionKey Unique identifier of the definition to get (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSmsDefinitionCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/sms/definitions/{definitionKey}"
            .replaceAll("\\{" + "definitionKey" + "\\}", apiClient.escapeString(definitionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSmsDefinitionValidateBeforeCall(String definitionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { definitionKey };
            Method method = this.getClass().getMethod("getSmsDefinitionWithHttpInfo", String.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = getSmsDefinitionCall(definitionKey, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * getSmsDefinition
     * Gets SMS definition configuration details for a definition key.
     * @param definitionKey Unique identifier of the definition to get (required)
     * @return CreateSmsDefinitionRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateSmsDefinitionRequest getSmsDefinition(String definitionKey) throws ApiException {
        ApiResponse<CreateSmsDefinitionRequest> resp = getSmsDefinitionWithHttpInfo(definitionKey);
        return resp.getData();
    }

    /**
     * getSmsDefinition
     * Gets SMS definition configuration details for a definition key.
     * @param definitionKey Unique identifier of the definition to get (required)
     * @return ApiResponse&lt;CreateSmsDefinitionRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateSmsDefinitionRequest> getSmsDefinitionWithHttpInfo( @NotNull String definitionKey) throws ApiException {
        com.squareup.okhttp.Call call = getSmsDefinitionValidateBeforeCall(definitionKey, null, null);
        Type localVarReturnType = new TypeToken<CreateSmsDefinitionRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getSmsDefinition (asynchronously)
     * Gets SMS definition configuration details for a definition key.
     * @param definitionKey Unique identifier of the definition to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSmsDefinitionAsync(String definitionKey, final ApiCallback<CreateSmsDefinitionRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSmsDefinitionValidateBeforeCall(definitionKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSmsDefinitionRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSmsDefinitions
     * @param status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param page Page number to return. (optional)
     * @param orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSmsDefinitionsCall(String status, BigDecimal pageSize, BigDecimal page, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/sms/definitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSmsDefinitionsValidateBeforeCall(String status, BigDecimal pageSize, BigDecimal page, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { status, pageSize, page, orderBy };
            Method method = this.getClass().getMethod("getSmsDefinitionsWithHttpInfo", String.class, BigDecimal.class, BigDecimal.class, String.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = getSmsDefinitionsCall(status, pageSize, page, orderBy, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * getSmsDefinitions
     * Gets a list of SMS definitions.
     * @param status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param page Page number to return. (optional)
     * @param orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     * @return GetSmsDefinitionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSmsDefinitionsResponse getSmsDefinitions(String status, BigDecimal pageSize, BigDecimal page, String orderBy) throws ApiException {
        ApiResponse<GetSmsDefinitionsResponse> resp = getSmsDefinitionsWithHttpInfo(status, pageSize, page, orderBy);
        return resp.getData();
    }

    /**
     * getSmsDefinitions
     * Gets a list of SMS definitions.
     * @param status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param page Page number to return. (optional)
     * @param orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     * @return ApiResponse&lt;GetSmsDefinitionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSmsDefinitionsResponse> getSmsDefinitionsWithHttpInfo( String status,  BigDecimal pageSize,  BigDecimal page,  String orderBy) throws ApiException {
        com.squareup.okhttp.Call call = getSmsDefinitionsValidateBeforeCall(status, pageSize, page, orderBy, null, null);
        Type localVarReturnType = new TypeToken<GetSmsDefinitionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getSmsDefinitions (asynchronously)
     * Gets a list of SMS definitions.
     * @param status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param page Page number to return. (optional)
     * @param orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSmsDefinitionsAsync(String status, BigDecimal pageSize, BigDecimal page, String orderBy, final ApiCallback<GetSmsDefinitionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSmsDefinitionsValidateBeforeCall(status, pageSize, page, orderBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSmsDefinitionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSmsSendStatusForRecipient
     * @param messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSmsSendStatusForRecipientCall(String messageKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messaging/v1/sms/messages/{messageKey}"
            .replaceAll("\\{" + "messageKey" + "\\}", apiClient.escapeString(messageKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSmsSendStatusForRecipientValidateBeforeCall(String messageKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { messageKey };
            Method method = this.getClass().getMethod("getSmsSendStatusForRecipientWithHttpInfo", String.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = getSmsSendStatusForRecipientCall(messageKey, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * getSmsSendStatusForRecipient
     * Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
     * @param messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     * @return GetDefinitionSendStatusForRecipientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDefinitionSendStatusForRecipientResponse getSmsSendStatusForRecipient(String messageKey) throws ApiException {
        ApiResponse<GetDefinitionSendStatusForRecipientResponse> resp = getSmsSendStatusForRecipientWithHttpInfo(messageKey);
        return resp.getData();
    }

    /**
     * getSmsSendStatusForRecipient
     * Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
     * @param messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     * @return ApiResponse&lt;GetDefinitionSendStatusForRecipientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDefinitionSendStatusForRecipientResponse> getSmsSendStatusForRecipientWithHttpInfo( @NotNull String messageKey) throws ApiException {
        com.squareup.okhttp.Call call = getSmsSendStatusForRecipientValidateBeforeCall(messageKey, null, null);
        Type localVarReturnType = new TypeToken<GetDefinitionSendStatusForRecipientResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getSmsSendStatusForRecipient (asynchronously)
     * Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
     * @param messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSmsSendStatusForRecipientAsync(String messageKey, final ApiCallback<GetDefinitionSendStatusForRecipientResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSmsSendStatusForRecipientValidateBeforeCall(messageKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDefinitionSendStatusForRecipientResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for partiallyUpdateEmailDefinition
     * @param definitionKey Unique identifier of the definition. (required)
     * @param body JSON Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call partiallyUpdateEmailDefinitionCall(String definitionKey, UpdateEmailDefinitionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/definitions/{definitionKey}"
            .replaceAll("\\{" + "definitionKey" + "\\}", apiClient.escapeString(definitionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partiallyUpdateEmailDefinitionValidateBeforeCall(String definitionKey, UpdateEmailDefinitionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { definitionKey, body };
            Method method = this.getClass().getMethod("partiallyUpdateEmailDefinitionWithHttpInfo", String.class, UpdateEmailDefinitionRequest.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = partiallyUpdateEmailDefinitionCall(definitionKey, body, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * partiallyUpdateEmailDefinition
     * Updates a specific email definition.
     * @param definitionKey Unique identifier of the definition. (required)
     * @param body JSON Parameters (optional)
     * @return CreateEmailDefinitionRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateEmailDefinitionRequest partiallyUpdateEmailDefinition(String definitionKey, UpdateEmailDefinitionRequest body) throws ApiException {
        ApiResponse<CreateEmailDefinitionRequest> resp = partiallyUpdateEmailDefinitionWithHttpInfo(definitionKey, body);
        return resp.getData();
    }

    /**
     * partiallyUpdateEmailDefinition
     * Updates a specific email definition.
     * @param definitionKey Unique identifier of the definition. (required)
     * @param body JSON Parameters (optional)
     * @return ApiResponse&lt;CreateEmailDefinitionRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateEmailDefinitionRequest> partiallyUpdateEmailDefinitionWithHttpInfo( @NotNull String definitionKey,  UpdateEmailDefinitionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = partiallyUpdateEmailDefinitionValidateBeforeCall(definitionKey, body, null, null);
        Type localVarReturnType = new TypeToken<CreateEmailDefinitionRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * partiallyUpdateEmailDefinition (asynchronously)
     * Updates a specific email definition.
     * @param definitionKey Unique identifier of the definition. (required)
     * @param body JSON Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partiallyUpdateEmailDefinitionAsync(String definitionKey, UpdateEmailDefinitionRequest body, final ApiCallback<CreateEmailDefinitionRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partiallyUpdateEmailDefinitionValidateBeforeCall(definitionKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateEmailDefinitionRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for partiallyUpdateSmsDefinition
     * @param definitionKey Unique identifier of the definition. (required)
     * @param body JSON Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call partiallyUpdateSmsDefinitionCall(String definitionKey, UpdateSmsDefinitionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/messaging/v1/sms/definitions/{definitionKey}"
            .replaceAll("\\{" + "definitionKey" + "\\}", apiClient.escapeString(definitionKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partiallyUpdateSmsDefinitionValidateBeforeCall(String definitionKey, UpdateSmsDefinitionRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { definitionKey, body };
            Method method = this.getClass().getMethod("partiallyUpdateSmsDefinitionWithHttpInfo", String.class, UpdateSmsDefinitionRequest.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = partiallyUpdateSmsDefinitionCall(definitionKey, body, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * partiallyUpdateSmsDefinition
     * Updates a specific SMS definition.
     * @param definitionKey Unique identifier of the definition. (required)
     * @param body JSON Parameters (optional)
     * @return CreateSmsDefinitionRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateSmsDefinitionRequest partiallyUpdateSmsDefinition(String definitionKey, UpdateSmsDefinitionRequest body) throws ApiException {
        ApiResponse<CreateSmsDefinitionRequest> resp = partiallyUpdateSmsDefinitionWithHttpInfo(definitionKey, body);
        return resp.getData();
    }

    /**
     * partiallyUpdateSmsDefinition
     * Updates a specific SMS definition.
     * @param definitionKey Unique identifier of the definition. (required)
     * @param body JSON Parameters (optional)
     * @return ApiResponse&lt;CreateSmsDefinitionRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateSmsDefinitionRequest> partiallyUpdateSmsDefinitionWithHttpInfo( @NotNull String definitionKey,  UpdateSmsDefinitionRequest body) throws ApiException {
        com.squareup.okhttp.Call call = partiallyUpdateSmsDefinitionValidateBeforeCall(definitionKey, body, null, null);
        Type localVarReturnType = new TypeToken<CreateSmsDefinitionRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * partiallyUpdateSmsDefinition (asynchronously)
     * Updates a specific SMS definition.
     * @param definitionKey Unique identifier of the definition. (required)
     * @param body JSON Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partiallyUpdateSmsDefinitionAsync(String definitionKey, UpdateSmsDefinitionRequest body, final ApiCallback<CreateSmsDefinitionRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partiallyUpdateSmsDefinitionValidateBeforeCall(definitionKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSmsDefinitionRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendEmailToMultipleRecipients
     * @param body JSON Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendEmailToMultipleRecipientsCall(SendEmailToMultipleRecipientsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/messages/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendEmailToMultipleRecipientsValidateBeforeCall(SendEmailToMultipleRecipientsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { body };
            Method method = this.getClass().getMethod("sendEmailToMultipleRecipientsWithHttpInfo", SendEmailToMultipleRecipientsRequest.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = sendEmailToMultipleRecipientsCall(body, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * sendEmailToMultipleRecipients
     * Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
     * @param body JSON Parameters (optional)
     * @return SendDefinitionToMultipleRecipientsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SendDefinitionToMultipleRecipientsResponse sendEmailToMultipleRecipients(SendEmailToMultipleRecipientsRequest body) throws ApiException {
        ApiResponse<SendDefinitionToMultipleRecipientsResponse> resp = sendEmailToMultipleRecipientsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * sendEmailToMultipleRecipients
     * Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
     * @param body JSON Parameters (optional)
     * @return ApiResponse&lt;SendDefinitionToMultipleRecipientsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SendDefinitionToMultipleRecipientsResponse> sendEmailToMultipleRecipientsWithHttpInfo( SendEmailToMultipleRecipientsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = sendEmailToMultipleRecipientsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<SendDefinitionToMultipleRecipientsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * sendEmailToMultipleRecipients (asynchronously)
     * Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
     * @param body JSON Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendEmailToMultipleRecipientsAsync(SendEmailToMultipleRecipientsRequest body, final ApiCallback<SendDefinitionToMultipleRecipientsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendEmailToMultipleRecipientsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SendDefinitionToMultipleRecipientsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendEmailToSingleRecipient
     * @param messageKey Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param body JSON Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendEmailToSingleRecipientCall(String messageKey, SendEmailToSingleRecipientRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/messaging/v1/email/messages/{messageKey}"
            .replaceAll("\\{" + "messageKey" + "\\}", apiClient.escapeString(messageKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendEmailToSingleRecipientValidateBeforeCall(String messageKey, SendEmailToSingleRecipientRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { messageKey, body };
            Method method = this.getClass().getMethod("sendEmailToSingleRecipientWithHttpInfo", String.class, SendEmailToSingleRecipientRequest.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = sendEmailToSingleRecipientCall(messageKey, body, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * sendEmailToSingleRecipient
     * Sends a message to a single recipient via an email definition using a messageKey path parameter.
     * @param messageKey Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param body JSON Parameters (optional)
     * @return SendDefinitionToSingleRecipientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SendDefinitionToSingleRecipientResponse sendEmailToSingleRecipient(String messageKey, SendEmailToSingleRecipientRequest body) throws ApiException {
        ApiResponse<SendDefinitionToSingleRecipientResponse> resp = sendEmailToSingleRecipientWithHttpInfo(messageKey, body);
        return resp.getData();
    }

    /**
     * sendEmailToSingleRecipient
     * Sends a message to a single recipient via an email definition using a messageKey path parameter.
     * @param messageKey Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param body JSON Parameters (optional)
     * @return ApiResponse&lt;SendDefinitionToSingleRecipientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SendDefinitionToSingleRecipientResponse> sendEmailToSingleRecipientWithHttpInfo( @NotNull String messageKey,  SendEmailToSingleRecipientRequest body) throws ApiException {
        com.squareup.okhttp.Call call = sendEmailToSingleRecipientValidateBeforeCall(messageKey, body, null, null);
        Type localVarReturnType = new TypeToken<SendDefinitionToSingleRecipientResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * sendEmailToSingleRecipient (asynchronously)
     * Sends a message to a single recipient via an email definition using a messageKey path parameter.
     * @param messageKey Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param body JSON Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendEmailToSingleRecipientAsync(String messageKey, SendEmailToSingleRecipientRequest body, final ApiCallback<SendDefinitionToSingleRecipientResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendEmailToSingleRecipientValidateBeforeCall(messageKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SendDefinitionToSingleRecipientResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendSmsToMultipleRecipients
     * @param body JSON Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendSmsToMultipleRecipientsCall(SendSmsToMultipleRecipientsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/messaging/v1/sms/messages/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendSmsToMultipleRecipientsValidateBeforeCall(SendSmsToMultipleRecipientsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { body };
            Method method = this.getClass().getMethod("sendSmsToMultipleRecipientsWithHttpInfo", SendSmsToMultipleRecipientsRequest.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = sendSmsToMultipleRecipientsCall(body, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * sendSmsToMultipleRecipients
     * Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
     * @param body JSON Parameters (optional)
     * @return SendDefinitionToMultipleRecipientsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SendDefinitionToMultipleRecipientsResponse sendSmsToMultipleRecipients(SendSmsToMultipleRecipientsRequest body) throws ApiException {
        ApiResponse<SendDefinitionToMultipleRecipientsResponse> resp = sendSmsToMultipleRecipientsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * sendSmsToMultipleRecipients
     * Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
     * @param body JSON Parameters (optional)
     * @return ApiResponse&lt;SendDefinitionToMultipleRecipientsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SendDefinitionToMultipleRecipientsResponse> sendSmsToMultipleRecipientsWithHttpInfo( SendSmsToMultipleRecipientsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = sendSmsToMultipleRecipientsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<SendDefinitionToMultipleRecipientsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * sendSmsToMultipleRecipients (asynchronously)
     * Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
     * @param body JSON Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendSmsToMultipleRecipientsAsync(SendSmsToMultipleRecipientsRequest body, final ApiCallback<SendDefinitionToMultipleRecipientsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendSmsToMultipleRecipientsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SendDefinitionToMultipleRecipientsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendSmsToSingleRecipient
     * @param messageKey Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param body JSON Parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendSmsToSingleRecipientCall(String messageKey, SendSmsToSingleRecipientRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/messaging/v1/sms/messages/{messageKey}"
            .replaceAll("\\{" + "messageKey" + "\\}", apiClient.escapeString(messageKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendSmsToSingleRecipientValidateBeforeCall(String messageKey, SendSmsToSingleRecipientRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { messageKey, body };
            Method method = this.getClass().getMethod("sendSmsToSingleRecipientWithHttpInfo", String.class, SendSmsToSingleRecipientRequest.class);
            Set<ConstraintViolation<TransactionalMessagingApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = sendSmsToSingleRecipientCall(messageKey, body, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * sendSmsToSingleRecipient
     * Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
     * @param messageKey Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param body JSON Parameters (optional)
     * @return SendDefinitionToSingleRecipientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SendDefinitionToSingleRecipientResponse sendSmsToSingleRecipient(String messageKey, SendSmsToSingleRecipientRequest body) throws ApiException {
        ApiResponse<SendDefinitionToSingleRecipientResponse> resp = sendSmsToSingleRecipientWithHttpInfo(messageKey, body);
        return resp.getData();
    }

    /**
     * sendSmsToSingleRecipient
     * Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
     * @param messageKey Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param body JSON Parameters (optional)
     * @return ApiResponse&lt;SendDefinitionToSingleRecipientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SendDefinitionToSingleRecipientResponse> sendSmsToSingleRecipientWithHttpInfo( @NotNull String messageKey,  SendSmsToSingleRecipientRequest body) throws ApiException {
        com.squareup.okhttp.Call call = sendSmsToSingleRecipientValidateBeforeCall(messageKey, body, null, null);
        Type localVarReturnType = new TypeToken<SendDefinitionToSingleRecipientResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * sendSmsToSingleRecipient (asynchronously)
     * Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
     * @param messageKey Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param body JSON Parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendSmsToSingleRecipientAsync(String messageKey, SendSmsToSingleRecipientRequest body, final ApiCallback<SendDefinitionToSingleRecipientResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendSmsToSingleRecipientValidateBeforeCall(messageKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SendDefinitionToSingleRecipientResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
