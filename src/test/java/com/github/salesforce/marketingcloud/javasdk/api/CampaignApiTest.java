/*
 * Marketing Cloud REST API
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.salesforce.marketingcloud.javasdk.api;

import com.github.salesforce.marketingcloud.javasdk.ApiException;
import com.github.salesforce.marketingcloud.javasdk.JSON;
import com.github.salesforce.marketingcloud.javasdk.model.ApiError;

import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import com.github.salesforce.marketingcloud.javasdk.model.Campaign;
import org.junit.Assert;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;

/**
 * API tests for CampaignApi
 */
public class CampaignApiTest //extends ApiTest
{
    private final CampaignApi api;

    public CampaignApiTest() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        this.api = new ApiSutFactory<>(CampaignApi.class).create();
    }

    /**
     * createCampaign
     *
     * Creates a campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCampaignTest() throws ApiException {
        Campaign campaign = createCampaign();
        Campaign createCampaignResult = api.createCampaign(campaign);

        try
        {
            assertEquals(campaign.getName(), createCampaignResult.getName());
            assertEquals(campaign.getDescription(), createCampaignResult.getDescription());
            assertEquals(campaign.getCampaignCode(), createCampaignResult.getCampaignCode());
            assertEquals(campaign.getColor(), createCampaignResult.getColor());
            assertEquals(campaign.isFavorite(), createCampaignResult.isFavorite());
        }
        finally {
            String createCampaignResultId = createCampaignResult.getId();
            api.deleteCampaignById(createCampaignResultId);
        }
    }
    
    /**
     * deleteCampaign
     *
     * Deletes a campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCampaignByIdTest() throws ApiException {
        Campaign campaign = createCampaign();
        Campaign createCampaignResult = api.createCampaign(campaign);

        String campaignToDeleteId = createCampaignResult.getId();
        api.deleteCampaignById(campaignToDeleteId);

        try
        {
            api.getCampaignById(campaignToDeleteId);
            Assert.fail("No exception thrown");
        }
        catch (ApiException e){
            assertEquals(400, e.getCode());
            ApiError apiError = new JSON().deserialize(e.getResponseBody(), ApiError.class);
            assertEquals("Campaign does not exist", apiError.getMessage());
        }
    }
    
    /**
     * getCampaign
     *
     * Retrieves a campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignByIdTest() throws ApiException {
        Campaign campaign = createCampaign();
        Campaign createCampaignResult = api.createCampaign(campaign);
        String campaignToRetrieveId = createCampaignResult.getId();

        Campaign getCampaignResult = api .getCampaignById(campaignToRetrieveId);

        try
        {
            assertEquals(campaign.getName(), getCampaignResult.getName());
            assertEquals(campaign.getDescription(), getCampaignResult.getDescription());
            assertEquals(campaign.getCampaignCode(), getCampaignResult.getCampaignCode());
            assertEquals(campaign.getColor(), getCampaignResult.getColor());
            assertEquals(campaign.isFavorite(), getCampaignResult.isFavorite());
        }
        finally {
            api.deleteCampaignById(campaignToRetrieveId);
        }
    }

    private Campaign createCampaign()
    {
        String name = "CampaignName";
        String description = "CampaignDescription";
        String campaignCode = "CampaignCode";
        String color = "0000ff";
        Boolean favorite = false;

        Campaign campaign = new Campaign();
        campaign.setName(name);
        campaign.setDescription(description);
        campaign.setCampaignCode(campaignCode);
        campaign.setColor(color);
        campaign.setFavorite(favorite);

        return campaign;
    }
}
