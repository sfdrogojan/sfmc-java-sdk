/*
 * Marketing Cloud REST API
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.salesforce.marketingcloud.javasdk.api;

import com.github.salesforce.marketingcloud.javasdk.ApiException;
import com.github.salesforce.marketingcloud.javasdk.model.ApiError;

import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import com.github.salesforce.marketingcloud.javasdk.model.CreateEmailDefinitionRequest;
import com.github.salesforce.marketingcloud.javasdk.model.CreateSmsDefinitionRequest;
import com.github.salesforce.marketingcloud.javasdk.model.DeleteQueuedMessagesForSendDefinitionResponse;
import com.github.salesforce.marketingcloud.javasdk.model.DeleteSendDefinitionResponse;
import com.github.salesforce.marketingcloud.javasdk.model.GetDefinitionSendStatusForRecipientResponse;
import com.github.salesforce.marketingcloud.javasdk.model.GetDefinitionsNotSentToRecipientsResponse;
import com.github.salesforce.marketingcloud.javasdk.model.GetEmailDefinitionsResponse;
import com.github.salesforce.marketingcloud.javasdk.model.GetQueueMetricsForSendDefinitionResponse;
import com.github.salesforce.marketingcloud.javasdk.model.GetSmsDefinitionsResponse;
import com.github.salesforce.marketingcloud.javasdk.model.SendDefinitionToMultipleRecipientsResponse;
import com.github.salesforce.marketingcloud.javasdk.model.SendDefinitionToSingleRecipientResponse;
import com.github.salesforce.marketingcloud.javasdk.model.SendEmailToMultipleRecipientsRequest;
import com.github.salesforce.marketingcloud.javasdk.model.SendEmailToSingleRecipientRequest;
import com.github.salesforce.marketingcloud.javasdk.model.SendSmsToMultipleRecipientsRequest;
import com.github.salesforce.marketingcloud.javasdk.model.SendSmsToSingleRecipientRequest;
import com.github.salesforce.marketingcloud.javasdk.model.UpdateEmailDefinitionRequest;
import com.github.salesforce.marketingcloud.javasdk.model.UpdateSmsDefinitionRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionalMessagingApi
 */
@Ignore
public class TransactionalMessagingApiTest //extends ApiTest
{
    private final TransactionalMessagingApi api;

    public TransactionalMessagingApiTest() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        this.api = new ApiSutFactory<>(TransactionalMessagingApi.class).create();
    }

    /**
     * createEmailDefinition
     *
     * Creates the definition for an email.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEmailDefinitionTest() throws ApiException {
        CreateEmailDefinitionRequest body = null;
        CreateEmailDefinitionRequest response = api.createEmailDefinition(body);

        // TODO: test validations
    }
    
    /**
     * createSmsDefinition
     *
     * Creates the definition for an SMS.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmsDefinitionTest() throws ApiException {
        CreateSmsDefinitionRequest body = null;
        CreateSmsDefinitionRequest response = api.createSmsDefinition(body);

        // TODO: test validations
    }
    
    /**
     * deleteEmailDefinition
     *
     * Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmailDefinitionTest() throws ApiException {
        String definitionKey = null;
        DeleteSendDefinitionResponse response = api.deleteEmailDefinition(definitionKey);

        // TODO: test validations
    }
    
    /**
     * deleteQueuedMessagesForEmailDefinition
     *
     * Deletes the queue for an email definition. The email definition must be in inactive status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQueuedMessagesForEmailDefinitionTest() throws ApiException {
        String definitionKey = null;
        DeleteQueuedMessagesForSendDefinitionResponse response = api.deleteQueuedMessagesForEmailDefinition(definitionKey);

        // TODO: test validations
    }
    
    /**
     * deleteQueuedMessagesForSmsDefinition
     *
     * Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQueuedMessagesForSmsDefinitionTest() throws ApiException {
        String definitionKey = null;
        DeleteQueuedMessagesForSendDefinitionResponse response = api.deleteQueuedMessagesForSmsDefinition(definitionKey);

        // TODO: test validations
    }
    
    /**
     * deleteSmsDefinition
     *
     * Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmsDefinitionTest() throws ApiException {
        String definitionKey = null;
        DeleteSendDefinitionResponse response = api.deleteSmsDefinition(definitionKey);

        // TODO: test validations
    }
    
    /**
     * getEmailDefinition
     *
     * Gets email definition configuration details for a definition key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailDefinitionTest() throws ApiException {
        String definitionKey = null;
        CreateEmailDefinitionRequest response = api.getEmailDefinition(definitionKey);

        // TODO: test validations
    }
    
    /**
     * getEmailDefinitions
     *
     * Gets a list of email definitions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailDefinitionsTest() throws ApiException {
        String status = null;
        BigDecimal pageSize = null;
        BigDecimal page = null;
        String orderBy = null;
        GetEmailDefinitionsResponse response = api.getEmailDefinitions(status, pageSize, page, orderBy);

        // TODO: test validations
    }
    
    /**
     * getEmailSendStatusForRecipient
     *
     * Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailSendStatusForRecipientTest() throws ApiException {
        String messageKey = null;
        GetDefinitionSendStatusForRecipientResponse response = api.getEmailSendStatusForRecipient(messageKey);

        // TODO: test validations
    }
    
    /**
     * getEmailsNotSentToRecipients
     *
     * Gets a paginated list of messages that were not sent, ordered from oldest to newest.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailsNotSentToRecipientsTest() throws ApiException {
        String type = null;
        Integer pageSize = null;
        Integer lastEventId = null;
        GetDefinitionsNotSentToRecipientsResponse response = api.getEmailsNotSentToRecipients(type, pageSize, lastEventId);

        // TODO: test validations
    }
    
    /**
     * getQueueMetricsForEmailDefinition
     *
     * Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueueMetricsForEmailDefinitionTest() throws ApiException {
        String definitionKey = null;
        GetQueueMetricsForSendDefinitionResponse response = api.getQueueMetricsForEmailDefinition(definitionKey);

        // TODO: test validations
    }
    
    /**
     * getQueueMetricsForSmsDefinition
     *
     * Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueueMetricsForSmsDefinitionTest() throws ApiException {
        String definitionKey = null;
        GetQueueMetricsForSendDefinitionResponse response = api.getQueueMetricsForSmsDefinition(definitionKey);

        // TODO: test validations
    }
    
    /**
     * getSMSsNotSentToRecipients
     *
     * Gets a paginated list of messages that were not sent, ordered from oldest to newest.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSMSsNotSentToRecipientsTest() throws ApiException {
        String type = null;
        Integer pageSize = null;
        Integer lastEventId = null;
        GetDefinitionsNotSentToRecipientsResponse response = api.getSMSsNotSentToRecipients(type, pageSize, lastEventId);

        // TODO: test validations
    }
    
    /**
     * getSmsDefinition
     *
     * Gets SMS definition configuration details for a definition key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmsDefinitionTest() throws ApiException {
        String definitionKey = null;
        CreateSmsDefinitionRequest response = api.getSmsDefinition(definitionKey);

        // TODO: test validations
    }
    
    /**
     * getSmsDefinitions
     *
     * Gets a list of SMS definitions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmsDefinitionsTest() throws ApiException {
        String status = null;
        BigDecimal pageSize = null;
        BigDecimal page = null;
        String orderBy = null;
        GetSmsDefinitionsResponse response = api.getSmsDefinitions(status, pageSize, page, orderBy);

        // TODO: test validations
    }
    
    /**
     * getSmsSendStatusForRecipient
     *
     * Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmsSendStatusForRecipientTest() throws ApiException {
        String messageKey = null;
        GetDefinitionSendStatusForRecipientResponse response = api.getSmsSendStatusForRecipient(messageKey);

        // TODO: test validations
    }
    
    /**
     * partiallyUpdateEmailDefinition
     *
     * Updates a specific email definition.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partiallyUpdateEmailDefinitionTest() throws ApiException {
        String definitionKey = null;
        UpdateEmailDefinitionRequest body = null;
        CreateEmailDefinitionRequest response = api.partiallyUpdateEmailDefinition(definitionKey, body);

        // TODO: test validations
    }
    
    /**
     * partiallyUpdateSmsDefinition
     *
     * Updates a specific SMS definition.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partiallyUpdateSmsDefinitionTest() throws ApiException {
        String definitionKey = null;
        UpdateSmsDefinitionRequest body = null;
        CreateSmsDefinitionRequest response = api.partiallyUpdateSmsDefinition(definitionKey, body);

        // TODO: test validations
    }
    
    /**
     * sendEmailToMultipleRecipients
     *
     * Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendEmailToMultipleRecipientsTest() throws ApiException {
        SendEmailToMultipleRecipientsRequest body = null;
        SendDefinitionToMultipleRecipientsResponse response = api.sendEmailToMultipleRecipients(body);

        // TODO: test validations
    }
    
    /**
     * sendEmailToSingleRecipient
     *
     * Sends a message to a single recipient via an email definition using a messageKey path parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendEmailToSingleRecipientTest() throws ApiException {
        String messageKey = null;
        SendEmailToSingleRecipientRequest body = null;
        SendDefinitionToSingleRecipientResponse response = api.sendEmailToSingleRecipient(messageKey, body);

        // TODO: test validations
    }
    
    /**
     * sendSmsToMultipleRecipients
     *
     * Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendSmsToMultipleRecipientsTest() throws ApiException {
        SendSmsToMultipleRecipientsRequest body = null;
        SendDefinitionToMultipleRecipientsResponse response = api.sendSmsToMultipleRecipients(body);

        // TODO: test validations
    }
    
    /**
     * sendSmsToSingleRecipient
     *
     * Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendSmsToSingleRecipientTest() throws ApiException {
        String messageKey = null;
        SendSmsToSingleRecipientRequest body = null;
        SendDefinitionToSingleRecipientResponse response = api.sendSmsToSingleRecipient(messageKey, body);

        // TODO: test validations
    }
    
}
